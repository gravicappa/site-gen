#!/bin/sh
# NAME
#
#   gingergen galery generation script
#
# SYNTAX
#
# .Galery width: <width> dir: <dir> ext: <extension>
#
# width: the width of thumbnail images (images are scaled proportionally)
# dir: relative to .md file directory with images
# ext: extension of images (png, jpg, ... ) in image directory
#
# DESCRIPTION
#
# Finds '.Galery ...' line in standard input and outputs generated
# Markdown/HTML code of image galery instead on standard output. Other lines
# are printed unchanged.
#
# Image galery is wrapped in 'div' with class 'image_galery'. Each galery
# entry has DOM-path '.image_galery.a.img' so your CSS can contain something
# like
#  
#  .image_galery {
#    ...
#  }
#  
#  .image_galery a img {
#    border: 5px solid #999;
#    margin: 12px;
#  }
#
# REQUIREMENTS
# galery uses `convert` from ImageMagick.

mkgalery() {
  w=200
  ext=png
  dir="$(echo "$file" | sed 's/\.[^.]*$//')"
  shift
  while test "$#" -gt 0; do
    case "$1" in
      width:) w="$2"; shift;;
      dir:) dir="$2"; shift;;
      ext:) ext="$2"; shift;;
    esac
    shift
  done
  filedir="$(dirname "$file")"
  printf "%s\n<div class='image_galery'>\n" ---
  (
    cd "$filedir"
    for f in "$dir"/*."$ext"; do
      if test -f "$f"; then
        thumb="$dir/thumb/$(basename "$f")"
        if ! test -f "$thumb"; then
          mkdir -p "$dir/thumb"
          convert "$f" -resize "$w" "$thumb"
        fi
        printf "<a href='%s'>" "$f"
        a="$(basename "$f" | sed 's/\.[^.]*$//')"
        printf "<img src='%s' alt='%s'/></a>\n" "$thumb" "$a"
      fi
    done
  )
  printf "</div>\n---\n"
}

while IFS= read -r line; do
	case "$line" in
		'.Galery '*) eval mkgalery "$line" ;;
		*) echo "$line"
	esac
done
